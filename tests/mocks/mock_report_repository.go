// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/report_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/report_repository.go -destination=tests/mocks/mock_report_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/onunkwor/flypro-assestment-v2/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockReportRepository is a mock of ReportRepository interface.
type MockReportRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReportRepositoryMockRecorder
	isgomock struct{}
}

// MockReportRepositoryMockRecorder is the mock recorder for MockReportRepository.
type MockReportRepositoryMockRecorder struct {
	mock *MockReportRepository
}

// NewMockReportRepository creates a new mock instance.
func NewMockReportRepository(ctrl *gomock.Controller) *MockReportRepository {
	mock := &MockReportRepository{ctrl: ctrl}
	mock.recorder = &MockReportRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportRepository) EXPECT() *MockReportRepositoryMockRecorder {
	return m.recorder
}

// AddExpenseToReport mocks base method.
func (m *MockReportRepository) AddExpenseToReport(ctx context.Context, reportID uint, expense *models.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpenseToReport", ctx, reportID, expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExpenseToReport indicates an expected call of AddExpenseToReport.
func (mr *MockReportRepositoryMockRecorder) AddExpenseToReport(ctx, reportID, expense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpenseToReport", reflect.TypeOf((*MockReportRepository)(nil).AddExpenseToReport), ctx, reportID, expense)
}

// CreateReport mocks base method.
func (m *MockReportRepository) CreateReport(ctx context.Context, report *models.ExpenseReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReport", ctx, report)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReport indicates an expected call of CreateReport.
func (mr *MockReportRepositoryMockRecorder) CreateReport(ctx, report any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReport", reflect.TypeOf((*MockReportRepository)(nil).CreateReport), ctx, report)
}

// GetExpenseReportByID mocks base method.
func (m *MockReportRepository) GetExpenseReportByID(ctx context.Context, id uint) (*models.ExpenseReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenseReportByID", ctx, id)
	ret0, _ := ret[0].(*models.ExpenseReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenseReportByID indicates an expected call of GetExpenseReportByID.
func (mr *MockReportRepositoryMockRecorder) GetExpenseReportByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseReportByID", reflect.TypeOf((*MockReportRepository)(nil).GetExpenseReportByID), ctx, id)
}

// GetReportExpenses mocks base method.
func (m *MockReportRepository) GetReportExpenses(ctx context.Context, userID uint, offset, limit int) ([]models.ExpenseReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportExpenses", ctx, userID, offset, limit)
	ret0, _ := ret[0].([]models.ExpenseReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportExpenses indicates an expected call of GetReportExpenses.
func (mr *MockReportRepositoryMockRecorder) GetReportExpenses(ctx, userID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportExpenses", reflect.TypeOf((*MockReportRepository)(nil).GetReportExpenses), ctx, userID, offset, limit)
}

// IncrementReportTotal mocks base method.
func (m *MockReportRepository) IncrementReportTotal(ctx context.Context, reportID uint, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementReportTotal", ctx, reportID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementReportTotal indicates an expected call of IncrementReportTotal.
func (mr *MockReportRepositoryMockRecorder) IncrementReportTotal(ctx, reportID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementReportTotal", reflect.TypeOf((*MockReportRepository)(nil).IncrementReportTotal), ctx, reportID, amount)
}

// SubmitReport mocks base method.
func (m *MockReportRepository) SubmitReport(ctx context.Context, reportID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReport", ctx, reportID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitReport indicates an expected call of SubmitReport.
func (mr *MockReportRepositoryMockRecorder) SubmitReport(ctx, reportID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReport", reflect.TypeOf((*MockReportRepository)(nil).SubmitReport), ctx, reportID)
}
