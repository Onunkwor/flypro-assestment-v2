// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/expense_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/expense_repository.go -destination=tests/mocks/mock_expense_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/onunkwor/flypro-assestment-v2/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockExpenseRepository is a mock of ExpenseRepository interface.
type MockExpenseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseRepositoryMockRecorder
	isgomock struct{}
}

// MockExpenseRepositoryMockRecorder is the mock recorder for MockExpenseRepository.
type MockExpenseRepositoryMockRecorder struct {
	mock *MockExpenseRepository
}

// NewMockExpenseRepository creates a new mock instance.
func NewMockExpenseRepository(ctrl *gomock.Controller) *MockExpenseRepository {
	mock := &MockExpenseRepository{ctrl: ctrl}
	mock.recorder = &MockExpenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseRepository) EXPECT() *MockExpenseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExpenseRepository) Create(ctx context.Context, expense *models.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExpenseRepositoryMockRecorder) Create(ctx, expense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExpenseRepository)(nil).Create), ctx, expense)
}

// DeleteExpense mocks base method.
func (m *MockExpenseRepository) DeleteExpense(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpense", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpense indicates an expected call of DeleteExpense.
func (mr *MockExpenseRepositoryMockRecorder) DeleteExpense(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpense", reflect.TypeOf((*MockExpenseRepository)(nil).DeleteExpense), ctx, id)
}

// GetExpenseByID mocks base method.
func (m *MockExpenseRepository) GetExpenseByID(ctx context.Context, id uint) (*models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenseByID", ctx, id)
	ret0, _ := ret[0].(*models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenseByID indicates an expected call of GetExpenseByID.
func (mr *MockExpenseRepositoryMockRecorder) GetExpenseByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseByID", reflect.TypeOf((*MockExpenseRepository)(nil).GetExpenseByID), ctx, id)
}

// GetExpenses mocks base method.
func (m *MockExpenseRepository) GetExpenses(ctx context.Context, filters map[string]any, offset, limit int) ([]models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenses", ctx, filters, offset, limit)
	ret0, _ := ret[0].([]models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenses indicates an expected call of GetExpenses.
func (mr *MockExpenseRepositoryMockRecorder) GetExpenses(ctx, filters, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenses", reflect.TypeOf((*MockExpenseRepository)(nil).GetExpenses), ctx, filters, offset, limit)
}

// UpdateExpense mocks base method.
func (m *MockExpenseRepository) UpdateExpense(ctx context.Context, id uint, expense *models.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpense", ctx, id, expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpense indicates an expected call of UpdateExpense.
func (mr *MockExpenseRepositoryMockRecorder) UpdateExpense(ctx, id, expense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpense", reflect.TypeOf((*MockExpenseRepository)(nil).UpdateExpense), ctx, id, expense)
}
