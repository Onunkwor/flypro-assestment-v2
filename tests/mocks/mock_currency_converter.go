// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/currency_iface.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/currency_iface.go -destination=tests/mocks/mock_currency_converter.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCurrencyConverter is a mock of CurrencyConverter interface.
type MockCurrencyConverter struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyConverterMockRecorder
	isgomock struct{}
}

// MockCurrencyConverterMockRecorder is the mock recorder for MockCurrencyConverter.
type MockCurrencyConverterMockRecorder struct {
	mock *MockCurrencyConverter
}

// NewMockCurrencyConverter creates a new mock instance.
func NewMockCurrencyConverter(ctrl *gomock.Controller) *MockCurrencyConverter {
	mock := &MockCurrencyConverter{ctrl: ctrl}
	mock.recorder = &MockCurrencyConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyConverter) EXPECT() *MockCurrencyConverterMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockCurrencyConverter) Convert(ctx context.Context, amount float64, from, to string) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", ctx, amount, from, to)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Convert indicates an expected call of Convert.
func (mr *MockCurrencyConverterMockRecorder) Convert(ctx, amount, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockCurrencyConverter)(nil).Convert), ctx, amount, from, to)
}
